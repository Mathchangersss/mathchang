<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Game Matematika Geometri - Terinspirasi GitHub</title>
  <link
    href="https://fonts.googleapis.com/icon?family=Material+Icons"
    rel="stylesheet"
  />
  <style>
    /*
      Palet warna terinspirasi GitHub dengan gaya neon untuk UI game:
      Latar terang dengan kartu berwarna lembut dan aksen neon menyala.
    */
    :root {
      --color-bg: #f6f8fa;
      --color-bg-header: #24292e;
      --color-bg-sidebar: #ffffff;
      --color-bg-bottom: #f6f8fa;
      --color-text-primary: #24292e;
      --color-text-secondary: #6e7781;
      --color-accent-blue: #0366d6;
      --color-accent-green: #28a745;
      --color-accent-red: #d73a49;
      --color-accent-orange: #f66a0a;
      --color-neon-blue: #1f6feb;
      --color-neon-green: #2ea44f;
      --color-neon-red: #cf222e;
      --color-neon-orange: #d9651f;

      /* Bayangan neon */
      --glow-blue: 0 0 10px 2px rgba(31, 111, 235, 0.7);
      --glow-green: 0 0 10px 2px rgba(46, 164, 79, 0.7);
      --glow-red: 0 0 10px 2px rgba(207, 34, 46, 0.7);
      --glow-orange: 0 0 10px 2px rgba(217, 101, 31, 0.7);
    }

    /* Reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    body, html {
      height: 100%;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
        Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
      background: var(--color-bg);
      color: var(--color-text-primary);
      overflow: hidden;
      user-select: none;
    }
    button {
      font-family: inherit;
      cursor: pointer;
      border: none;
      outline-offset: 2px;
      transition: all 0.2s ease;
    }
    button:focus {
      outline: 2px solid var(--color-accent-blue);
      outline-offset: 2px;
    }

    /* Layout */
    #app {
      display: flex;
      flex-direction: column;
      height: 100vh;
      width: 100vw;
    }
    header {
      position: relative;
      background: linear-gradient(90deg, #161b22, #0d1117);
      color: #c9d1d9;
      padding: 0 1.5rem;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      box-shadow:
        inset 0 -1px 0 #30363d,
        0 1px 10px rgba(3, 102, 214, 0.4);
      z-index: 20;
      user-select: none;
    }
    header .left,
    header .right {
      display: flex;
      align-items: center;
      gap: 20px;
    }

    header .score,
    header .level,
    header .lives,
    header .timer {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 0.9rem;
      color: var(--color-text-secondary);
    }
    header .score .material-icons,
    header .level .material-icons,
    header .lives .material-icons,
    header .timer .material-icons {
      font-size: 18px;
      color: var(--color-accent-blue);
      filter: drop-shadow(var(--glow-blue));
    }
    header .lives .heart-icon {
      color: var(--color-neon-red);
      filter: drop-shadow(var(--glow-red));
    }

    main {
      flex: 1;
      display: flex;
      background: #ffffff;
      overflow: hidden;
      position: relative;
    }

    #game-canvas-container {
      flex-grow: 1;
      position: relative;
      background:
        radial-gradient(circle at center, #e3e8f0, #f6f8fa);
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
    }

    canvas#game-canvas {
      background: #ffffff;
      max-width: 100%;
      max-height: 100%;
      border-radius: 8px;
      box-shadow:
        0 0 20px rgba(3, 102, 214, 0.3),
        inset 0 0 35px rgba(3, 102, 214, 0.12);
      image-rendering: crisp-edges;
      user-select: none;
    }

    aside#sidebar {
      width: 300px;
      min-width: 280px;
      max-width: 320px;
      background: var(--color-bg-sidebar);
      border-left: 1px solid #e1e4e8;
      box-shadow: inset 1px 0 0 #f0f3f6;
      display: flex;
      flex-direction: column;
      transition: transform 0.3s ease;
      overflow-y: auto;
      font-size: 0.9rem;
      line-height: 1.4;
    }
    aside#sidebar.collapsed {
      transform: translateX(100%);
      box-shadow: none;
      pointer-events: none;
      position: absolute;
      right: 0;
      top: 0;
      height: 100%;
      z-index: 30;
    }
    #sidebar header {
      background: #24292e;
      color: #c9d1d9;
      font-weight: 700;
      padding: 1rem 1.5rem;
      font-size: 1.1rem;
      user-select: none;
      display: flex;
      justify-content: space-between;
      align-items: center;
      letter-spacing: 0.03em;
    }
    #sidebar section {
      padding: 1rem 1.5rem;
      border-bottom: 1px solid #e1e4e8;
    }
    #sidebar h3 {
      margin-bottom: 0.5rem;
      font-weight: 700;
      color: var(--color-text-primary);
    }
    #sidebar p {
      color: var(--color-text-secondary);
      font-size: 0.85rem;
      margin-bottom: 12px;
    }
    #sidebar ul {
      list-style-type: disc;
      margin-left: 18px;
      color: var(--color-text-secondary);
    }
    #sidebar .collapsible-toggle {
      background: none;
      border: none;
      color: var(--color-accent-blue);
      font-weight: 600;
      font-size: 14px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 6px;
      user-select: none;
    }
    #sidebar .collapsible-toggle:hover {
      text-decoration: underline;
    }

    #sidebar .achievements {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      justify-content: center;
    }
    #sidebar .achievement {
      background: #fafbfc;
      border: 1px solid #d0d7de;
      border-radius: 8px;
      padding: 6px 10px;
      min-width: 120px;
      color: var(--color-text-secondary);
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 0.8rem;
      font-weight: 600;
      filter: drop-shadow(0 0 1px #d0d7de);
    }
    #sidebar .achievement.unlocked {
      color: var(--color-accent-green);
      border-color: var(--color-accent-green);
      background: #dafbe1;
      filter: drop-shadow(var(--glow-green));
    }
    #sidebar .achievement .material-icons {
      font-size: 18px;
    }

    footer {
      height: 60px;
      background: var(--color-bg-bottom);
      box-shadow: inset 0 1px 0 #d0d7de;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 1.5rem;
      user-select: none;
    }
    footer .btn {
      background: var(--color-accent-blue);
      color: white;
      padding: 8px 16px;
      border-radius: 6px;
      font-weight: 600;
      display: inline-flex;
      align-items: center;
      gap: 6px;
      transition: background-color 0.3s ease;
      box-shadow: 0 0 15px rgba(3,102,214,0.4);
    }
    footer .btn:hover {
      background: #0245b0;
    }
    footer .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      box-shadow: none;
    }

    /* Scrollbar for sidebar */
    aside#sidebar::-webkit-scrollbar {
      width: 8px;
    }
    aside#sidebar::-webkit-scrollbar-track {
      background: #f6f8fa;
    }
    aside#sidebar::-webkit-scrollbar-thumb {
      background: #d0d7de;
      border-radius: 8px;
    }
    aside#sidebar::-webkit-scrollbar-thumb:hover {
      background: #b3bac5;
    }

    /* Responsive: Tampilan mobile */
    @media (max-width: 768px) {
      aside#sidebar {
        position: fixed;
        top: 60px;
        bottom: 60px;
        right: 0;
        width: 280px;
        background: var(--color-bg-sidebar);
        border-left: 1px solid #e1e4e8;
        box-shadow: -5px 0 15px rgba(3, 102, 214, 0.15);
        z-index: 25;
        transform: translateX(100%);
        transition: transform 0.3s ease;
      }
      aside#sidebar.visible {
        transform: translateX(0);
      }
      main {
        flex-direction: column;
      }
      #game-canvas-container {
        height: calc(100vh - 120px);
      }
    }

    /* Indikator power-up dengan neon */
    .powerup-indicator {
      position: absolute;
      top: 70px;
      left: 50%;
      transform: translateX(-50%);
      background: var(--color-neon-orange);
      padding: 6px 16px;
      border-radius: 16px;
      color: white;
      font-weight: 700;
      font-size: 0.95rem;
      filter: drop-shadow(var(--glow-orange));
      animation: pulse-glow 2.5s infinite;
      user-select: none;
      pointer-events: none;
      z-index: 15;
    }
    @keyframes pulse-glow {
      0%, 100% {
        filter: drop-shadow(var(--glow-orange));
      }
      50% {
        filter: drop-shadow(0 0 25px rgba(217, 101, 31, 0.8));
      }
    }

    /* Animasi popup pencapaian */
    .achievement-popup {
      position: fixed;
      bottom: 120px;
      right: 20px;
      background: #28a745;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      font-weight: 700;
      box-shadow: 0 0 20px #28a745cc;
      user-select: none;
      animation: slideInUp 0.5s ease forwards, fadeOut 0.5s ease 2.5s forwards;
      z-index: 100;
    }
    @keyframes slideInUp {
      from {
        opacity: 0;
        transform: translateY(40px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    @keyframes fadeOut {
      to {
        opacity: 0;
      }
    }

    /* Tooltip */
    .tooltip {
      position: relative;
      display: inline-block;
      cursor: help;
    }

    .tooltip .tooltiptext {
      visibility: hidden;
      width: max-content;
      max-width: 200px;
      background-color: var(--color-text-primary);
      color: #fff;
      text-align: center;
      padding: 6px 8px;
      border-radius: 6px;
      position: absolute;
      z-index: 50;
      bottom: 125%;
      left: 50%;
      transform: translateX(-50%);
      opacity: 0;
      transition: opacity 0.3s;
      pointer-events: none;
      font-size: 0.8rem;
      user-select: none;
      line-height: 1.3;
    }

    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
    }
  </style>
</head>
<body>
  <div id="app" role="application" aria-label="Game matematika geometri">

    <!-- Header with score, level, lives, timer -->
    <header>
      <div class="left" aria-live="polite" aria-atomic="true">
        <div class="score" tabindex="0">
          <span class="material-icons" aria-hidden="true">score</span>
          Skor: <strong id="score-display">0</strong>
        </div>
        <div class="level" tabindex="0">
          <span class="material-icons" aria-hidden="true">leaderboard</span>
          Level: <strong id="level-display">1</strong>
        </div>
        <div class="lives" tabindex="0">
          <span class="material-icons heart-icon" aria-hidden="true" style="color: var(--color-neon-red)">favorite</span>
          Nyawa: <strong id="lives-display">3</strong>
        </div>
      </div>
      <div class="right" aria-live="polite" aria-atomic="true">
        <div class="timer" tabindex="0" aria-label="Sisa waktu putaran">
          <span class="material-icons" aria-hidden="true">timer</span>
          <strong id="timer-display">60</strong>dtk
        </div>
        <button id="toggle-sidebar" aria-label="Tampilkan/Sembunyikan sidebar kontrol dan pencapaian" title="Tombol Sidebar" aria-pressed="false">
          <span class="material-icons">menu</span>
        </button>
      </div>
    </header>

    <!-- Main content: Game canvas and sidebar -->
    <main>
      <div id="game-canvas-container" aria-label="Area kanvas permainan">
        <canvas id="game-canvas" width="640" height="480" role="img" aria-live="polite" aria-label="Soal matematika geometri interaktif dan permainan"></canvas>
        <div id="powerup-indicator" class="powerup-indicator" aria-live="polite" role="alert" hidden></div>
      </div>
      <aside id="sidebar" aria-label="Kontrol permainan, power-up, dan pencapaian">
        <header>
          Kontrol & Pencapaian
          <button id="sidebar-close" aria-label="Tutup sidebar" title="Tutup Sidebar">
            <span class="material-icons">close</span>
          </button>
        </header>

        <section id="controls-section">
          <h3>Kontrol</h3>
          <p>Jawab soal geometri dengan mengetikkan jawaban angka kemudian tekan <kbd>Enter</kbd>.</p>
          <ul>
            <li><strong>Jeda:</strong> <kbd>Esc</kbd></li>
            <li><strong>Layar Penuh:</strong> <kbd>F</kbd></li>
            <li><strong>Tampilkan Sidebar:</strong> Klik ikon menu atau <kbd>S</kbd></li>
          </ul>
        </section>

        <section id="powerups-section">
          <h3>Power-Up</h3>
          <ul>
            <li><strong>Hentikan Waktu:</strong> Membekukan timer selama 10 detik</li>
            <li><strong>Petunjuk:</strong> Menampilkan bantuan untuk soal saat ini</li>
          </ul>
        </section>

        <section id="achievements-section">
          <h3>Pencapaian</h3>
          <div class="achievements" aria-live="polite" aria-atomic="true"></div>
        </section>
      </aside>
    </main>

    <!-- Bottom action buttons -->
    <footer>
      <button id="btn-pause" class="btn" aria-pressed="false" aria-label="Jeda atau lanjutkan permainan" title="Jeda/Lanjutkan">
        <span class="material-icons" aria-hidden="true">pause</span> Jeda
      </button>
      <button id="btn-fullscreen" class="btn" aria-label="Tombol layar penuh" title="Layar Penuh">
        <span class="material-icons" aria-hidden="true">fullscreen</span> Layar Penuh
      </button>
      <button id="btn-reset" class="btn" aria-label="Mulai ulang permainan" title="Restart Permainan">
        <span class="material-icons" aria-hidden="true">restart_alt</span> Mulai Ulang
      </button>
    </footer>

  </div>

  <script>
    (() => {
      'use strict';

      // PENGATURAN & KONSTANTA
      const CANVAS_WIDTH = 640;
      const CANVAS_HEIGHT = 480;
      const ROUND_TIME = 60; // detik
      const MAX_LIVES = 3;

      // Struktur state
      let gameState = {
        level: 1,
        score: 0,
        lives: MAX_LIVES,
        timer: ROUND_TIME,
        isPaused: false,
        isGameOver: false,
        difficulty: 1,
        powerUps: {
          timeFreezeActive: false,
          timeFreezeTimer: 0,
          hintUsed: false
        }
      };

      // Buffer input pemain untuk jawaban
      let playerInput = '';

      // Kolom soal geometri berdasarkan tingkat kesulitan (dalam bahasa Indonesia)
      const questionPool = {
        1: [
          { question: "Berapa luas persegi dengan sisi 2?", answer: 4, hint: "Luas = sisi × sisi" },
          { question: "Berapa keliling persegi panjang 3 x 4?", answer: 14, hint: "Keliling = 2 × (panjang + lebar)" },
          { question: "Berapa keliling lingkaran dengan jari-jari 3? (Gunakan π=3.14)", answer: 18.84, hint: "Keliling = 2 × π × r" },
          { question: "Berapa derajat sudut siku-siku?", answer: 90, hint: "Sudut siku-siku adalah 1/4 lingkaran penuh" },
          { question: "Luas segitiga dengan alas 4 dan tinggi 3 adalah?", answer: 6, hint: "Luas = 1/2 × alas × tinggi" },
        ],
        2: [
          { question: "Berapa luas lingkaran dengan diameter 10? (Gunakan π=3.14)", answer: 78.5, hint: "Luas = π × r²" },
          { question: "Berapa volume kubus dengan sisi 3?", answer: 27, hint: "Volume = sisi³" },
          { question: "Berapa luas permukaan kubus dengan sisi 4?", answer: 96, hint: "Luas permukaan = 6 × sisi²" },
          { question: "Berapa luas trapesium dengan sisi sejajar 8, 4 dan tinggi 3?", answer: 18, hint: "Luas = 1/2 × (a + b) × t" },
          { question: "Jumlah sudut dalam segilima (dalam derajat) adalah?", answer: 540, hint: "Jumlah = (n-2) × 180" },
        ],
        3: [
          { question: "Berapa volume silinder dengan jari-jari 2 dan tinggi 5? (Gunakan π=3.14)", answer: 62.8, hint: "Volume = π × r² × t" },
          { question: "Berapa panjang diagonal persegi dengan sisi 5?", answer: 7.07, hint: "Diagonal = sisi × √2 (bulatkan 2 desimal)" },
          { question: "Berapa luas permukaan bola dengan jari-jari 3? (Gunakan π=3.14)", answer: 113.04, hint: "Luas permukaan = 4 × π × r²" },
          { question: "Berapa volume kerucut dengan jari-jari 3 dan tinggi 4? (Gunakan π=3.14)", answer: 37.68, hint: "Volume = 1/3 × π × r² × t" },
          { question: "Berapa jumlah sisi pada dodekahedron?", answer: 12, hint: "Ini adalah salah satu bentuk platonic" },
        ]
      };

      // Pencapaian
      const achievements = [
        { id: 1, name: "Memulai", description: "Capai skor 10 poin pertama", icon: "star", unlocked: false, progress: 0 },
        { id: 2, name: "Cepat Berpikir", description: "Jawab soal kurang dari 5 detik", icon: "flash_on", unlocked: false, progress: 0 },
        { id: 3, name: "Pengguna Power-Up", description: "Gunakan power-up pertama kali", icon: "bolt", unlocked: false, progress: 0 },
        { id: 4, name: "Naik Level", description: "Capai level 5", icon: "trending_up", unlocked: false, progress: 0 },
        { id: 5, name: "Bertahan", description: "Selesaikan ronde dengan 1 nyawa tersisa", icon: "favorite_border", unlocked: false, progress: 0 },
      ];

      // Skor tertinggi disimpan di localStorage
      const HIGH_SCORES_KEY = "geo-math-high-scores-id";
      /** @type {Array<{name:string,score:number,level:number,date:string,achievements:number[]}>} */
      let highScores = JSON.parse(localStorage.getItem(HIGH_SCORES_KEY)) || [];

      // Canvas dan konteks
      const canvas = document.getElementById("game-canvas");
      const ctx = canvas.getContext("2d");

      // Elemen UI
      const scoreDisplay = document.getElementById("score-display");
      const levelDisplay = document.getElementById("level-display");
      const livesDisplay = document.getElementById("lives-display");
      const timerDisplay = document.getElementById("timer-display");
      const powerupIndicator = document.getElementById("powerup-indicator");
      const sidebar = document.getElementById("sidebar");
      const toggleSidebarBtn = document.getElementById("toggle-sidebar");
      const sidebarCloseBtn = document.getElementById("sidebar-close");
      const achievementsContainer = sidebar.querySelector(".achievements");
      const btnPause = document.getElementById("btn-pause");
      const btnFullscreen = document.getElementById("btn-fullscreen");
      const btnReset = document.getElementById("btn-reset");

      // Variabel permainan
      let lastFrameTime = 0;
      let currentQuestion = null;
      let questionStartTime = 0;
      let answerCorrectCount = 0;

      // Pool partikel untuk efek visual
      const particles = [];

      // Efek guncangan layar
      let shakeIntensity = 0;
      let shakeDecay = 0.9;

      // Efek suara sederhana (beep)
      const sounds = {
        click: () => playBeep(440, 0.05),
        error: () => playBeep(220, 0.2),
        success: () => playBeep(660, 0.2),
        powerup: () => playBeep(880, 0.1),
      };

      // Pemutar beep sederhana via Web Audio API
      function playBeep(frequency, duration) {
        if (!window.AudioContext) return;
        const audioCtx = new AudioContext();
        const oscillator = audioCtx.createOscillator();
        const gainNode = audioCtx.createGain();
        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);
        oscillator.type = 'square';
        oscillator.frequency.value = frequency;
        oscillator.start();
        gainNode.gain.setValueAtTime(0.1, audioCtx.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + duration);
        oscillator.stop(audioCtx.currentTime + duration);
        oscillator.onended = () => {
          audioCtx.close();
        };
      }

      // Inisialisasi permainan
      function initGame() {
        gameState = {
          level: 1,
          score: 0,
          lives: MAX_LIVES,
          timer: ROUND_TIME,
          isPaused: false,
          isGameOver: false,
          difficulty: 1,
          powerUps: {
            timeFreezeActive: false,
            timeFreezeTimer: 0,
            hintUsed: false
          },
        };
        playerInput = '';
        currentQuestion = null;
        answerCorrectCount = 0;
        shakeIntensity = 0;
        loadAchievementsUI();
        nextQuestion();
        updateUI();
        requestAnimationFrame(gameLoop);
      }

      // Pilih soal berikutnya sesuai tingkat kesulitan dan level
      function nextQuestion() {
        const diff = Math.min(3, gameState.difficulty);
        const pool = questionPool[diff];
        if (!pool) return null;
        // Pilih acak soal berbeda dari sebelumnya
        let newQ = pool[Math.floor(Math.random() * pool.length)];
        while (currentQuestion && newQ.question === currentQuestion.question) {
          newQ = pool[Math.floor(Math.random() * pool.length)];
        }
        currentQuestion = { ...newQ };
        currentQuestion.answered = false;
        questionStartTime = performance.now();
        gameState.powerUps.hintUsed = false;
      }

      // Update UI dengan status terkini
      function updateUI() {
        scoreDisplay.textContent = gameState.score.toString();
        levelDisplay.textContent = gameState.level.toString();
        livesDisplay.textContent = gameState.lives.toString();
        timerDisplay.textContent = Math.max(0, Math.ceil(gameState.timer)).toString();

        // Pencapaian
        updateAchievementsUI();

        // Indikator power-up
        if (gameState.powerUps.timeFreezeActive) {
          powerupIndicator.textContent = `Hentikan Waktu (${Math.ceil(gameState.powerUps.timeFreezeTimer)}dtk)`;
          powerupIndicator.hidden = false;
        } else {
          powerupIndicator.hidden = true;
        }

        // Label tombol jeda
        btnPause.setAttribute('aria-pressed', gameState.isPaused.toString());
        btnPause.querySelector("span.material-icons").textContent =
          gameState.isPaused ? "play_arrow" : "pause";
        btnPause.textContent = (gameState.isPaused ? " Lanjutkan" : " Jeda");
        btnPause.prepend(document.createElement("span"));
        btnPause.querySelector("span").className = "material-icons";
        btnPause.querySelector("span").textContent =
          gameState.isPaused ? "play_arrow" : "pause";
      }

      // Muat UI pencapaian dengan status terbaru
      function loadAchievementsUI() {
        achievementsContainer.innerHTML = '';

        for (const ach of achievements) {
          const div = document.createElement('div');
          div.className = 'achievement' + (ach.unlocked ? ' unlocked' : '');
          div.setAttribute('tabindex', '0');
          div.setAttribute('role', 'group');
          div.setAttribute('aria-label', `${ach.name}: ${ach.description} ${ach.unlocked ? 'Telah Dicapai' : 'Belum Dicapai'}`);
          div.innerHTML = `<span class="material-icons" aria-hidden="true">${ach.icon}</span>${ach.name}`;
          achievementsContainer.appendChild(div);
        }
      }

      // Perbarui status pencapaian dan tampilkan popup jika ada unlock baru
      function updateAchievementsUI() {
        for (const ach of achievements) {
          const wasUnlocked = ach.unlocked;
          switch (ach.id) {
            case 1:
              if (gameState.score >= 10) ach.unlocked = true;
              break;
            case 2:
              const lastAnswerTime = (performance.now() - questionStartTime)/1000;
              if (lastAnswerTime < 5 && currentQuestion && currentQuestion.answered) ach.unlocked = true;
              break;
            case 3:
              if (gameState.powerUps.hintUsed) ach.unlocked = true;
              break;
            case 4:
              if (gameState.level >= 5) ach.unlocked = true;
              break;
            case 5:
              if (gameState.lives === 1 && gameState.timer <= 0) ach.unlocked = true;
              break;
          }
          if (ach.unlocked && !wasUnlocked) {
            showAchievementPopup(ach);
            loadAchievementsUI();
          }
        }
      }

      // Tampilkan popup notifikasi pencapaian
      function showAchievementPopup(achievement) {
        const popup = document.createElement('div');
        popup.className = 'achievement-popup';
        popup.setAttribute('role', 'alert');
        popup.textContent = `Pencapaian terbuka: ${achievement.name}!`;
        document.body.appendChild(popup);
        setTimeout(() => {
          popup.remove();
        }, 3000);
      }

      // Loop permainan 60fps
      function gameLoop(timestamp) {
        const deltaTime = (timestamp - lastFrameTime) / 1000;
        lastFrameTime = timestamp;

        if (!gameState.isPaused && !gameState.isGameOver) {
          if (!gameState.powerUps.timeFreezeActive) {
            gameState.timer -= deltaTime;
            if (gameState.timer <= 0) {
              gameState.timer = 0;
              handleRoundEnd(false);
            }
          } else {
            gameState.powerUps.timeFreezeTimer -= deltaTime;
            if (gameState.powerUps.timeFreezeTimer <= 0) {
              gameState.powerUps.timeFreezeActive = false;
              gameState.powerUps.timeFreezeTimer = 0;
            }
          }

          updateParticles(deltaTime);
          updateUI();
          renderGame();
          if (shakeIntensity > 0) {
            shakeIntensity *= shakeDecay;
            if (shakeIntensity < 0.01) shakeIntensity = 0;
          }
        }

        requestAnimationFrame(gameLoop);
      }

      // Render isi kanvas permainan
      function renderGame() {
        ctx.save();

        // Efek guncang layar
        if (shakeIntensity > 0) {
          const dx = (Math.random() - 0.5) * shakeIntensity * 10;
          const dy = (Math.random() - 0.5) * shakeIntensity * 10;
          ctx.translate(dx, dy);
        }

        // Bersihkan canvas
        ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);

        // Gambar batas
        ctx.strokeStyle = '#0366d6';
        ctx.lineWidth = 4;
        ctx.beginPath();
        ctx.roundRect(2, 2, CANVAS_WIDTH - 4, CANVAS_HEIGHT - 4, 12);
        ctx.stroke();

        // Tampilkan soal saat ini
        if (currentQuestion) {
          ctx.fillStyle = '#24292e';
          ctx.font = '24px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif';
          ctx.textAlign = 'center';
          ctx.fillText(currentQuestion.question, CANVAS_WIDTH / 2, 80);

          if (gameState.powerUps.hintUsed) {
            ctx.fillStyle = '#d73a49';
            ctx.font = '16px "Segoe UI", sans-serif';
            ctx.fillText(`Petunjuk: ${currentQuestion.hint}`, CANVAS_WIDTH / 2, 120);
          }
        }

        // Tampilkan jawaban pemain di bawah tengah
        ctx.fillStyle = '#0366d6';
        ctx.font = 'bold 48px "Segoe UI", sans-serif';
        ctx.textAlign = 'center';
        ctx.fillText(playerInput || '_', CANVAS_WIDTH / 2, CANVAS_HEIGHT - 80);

        // Render partikel
        renderParticles(ctx);

        ctx.restore();
      }

      // Extend CanvasRenderingContext2D untuk stroke rounded rect
      CanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {
        this.beginPath();
        this.moveTo(x + r, y);
        this.lineTo(x + w - r, y);
        this.quadraticCurveTo(x + w, y, x + w, y + r);
        this.lineTo(x + w, y + h - r);
        this.quadraticCurveTo(x + w, y + h, x + w - r, y + h);
        this.lineTo(x + r, y + h);
        this.quadraticCurveTo(x, y + h, x, y + h - r);
        this.lineTo(x, y + r);
        this.quadraticCurveTo(x, y, x + r, y);
        this.closePath();
      };

      // Sistem partikel untuk efek visual
      function createParticle(x, y, color) {
        particles.push({
          x,
          y,
          radius: Math.random() * 3 + 2,
          color,
          lifetime: 0.6,
          maxLifetime: 0.6,
          vx: (Math.random() - 0.5) * 120,
          vy: (Math.random() - 0.5) * 120,
          alpha: 1
        });
      }
      function updateParticles(deltaTime) {
        for (let i = particles.length - 1; i >= 0; i--) {
          const p = particles[i];
          p.lifetime -= deltaTime;
          if (p.lifetime <= 0) {
            particles.splice(i, 1);
            continue;
          }
          p.x += p.vx * deltaTime;
          p.y += p.vy * deltaTime;
          p.alpha = p.lifetime / p.maxLifetime;
        }
      }
      function renderParticles(ctx) {
        particles.forEach((p) => {
          ctx.beginPath();
          ctx.fillStyle = `rgba(${hexToRgb(p.color)},${p.alpha})`;
          ctx.shadowColor = p.color;
          ctx.shadowBlur = 10;
          ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
          ctx.fill();
        });
      }

      // Helper hex to rgb
      function hexToRgb(hex) {
        const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function (m, r, g, b) {
          return r + r + g + g + b + b;
        });
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
          ? `${parseInt(result[1], 16)},${parseInt(result[2], 16)},${parseInt(
              result[3],
              16
            )}`
          : '0,0,0';
      }

      // Tangani input keyboard untuk jawaban dan kontrol
      function handleKeyDown(e) {
        if (gameState.isGameOver) return;

        if (e.key.length === 1 && /^[0-9.]$/.test(e.key)) {
          if (playerInput.length < 10) {
            playerInput += e.key;
            sounds.click();
            updateUI();
          }
        } else if (e.key === 'Backspace') {
          playerInput = playerInput.slice(0, -1);
          sounds.click();
          updateUI();
          e.preventDefault();
        } else if (e.key === 'Enter') {
          submitAnswer();
          e.preventDefault();
        } else if (e.key === 'Escape') {
          togglePause();
          e.preventDefault();
        } else if (e.key.toLowerCase() === 'f') {
          toggleFullscreen();
          e.preventDefault();
        } else if (e.key.toLowerCase() === 's') {
          toggleSidebar();
          e.preventDefault();
        }
      }

      // Kirim jawaban pemain untuk soal saat ini
      function submitAnswer() {
        if (!currentQuestion) return;

        let playerAnswer = parseFloat(playerInput);
        if (isNaN(playerAnswer) || playerInput.trim() === '') {
          sounds.error();
          shakeScreen();
          playerInput = '';
          updateUI();
          return;
        }

        function round2(num) {
          return Math.round(num * 100) / 100;
        }

        const correctAnswer = round2(currentQuestion.answer);
        const givenAnswer = round2(playerAnswer);

        if (givenAnswer === correctAnswer) {
          sounds.success();
          createParticle(CANVAS_WIDTH / 2, CANVAS_HEIGHT - 80, '#2ea44f');
          gameState.score += 10 * gameState.level;
          answerCorrectCount++;
          gameState.timer += 5;
          if (gameState.timer > ROUND_TIME) gameState.timer = ROUND_TIME;
          currentQuestion.answered = true;

          if (answerCorrectCount > 0 && answerCorrectCount % 3 === 0) {
            gameState.level++;
            gameState.difficulty = Math.min(3, gameState.difficulty + 1);
            showLevelUp();
          }
          playerInput = '';
          nextQuestion();
          updateUI();
        } else {
          sounds.error();
          shakeScreen();
          gameState.lives--;
          if (gameState.lives <= 0) {
            gameState.lives = 0;
            handleGameOver();
          } else {
            playerInput = '';
            updateUI();
          }
        }
      }

      // Tampilkan efek visual saat naik level
      function showLevelUp() {
        const popup = document.createElement('div');
        popup.className = 'achievement-popup';
        popup.style.background = 'var(--color-accent-blue)';
        popup.textContent = `Naik Level! Sekarang level ${gameState.level}`;
        document.body.appendChild(popup);
        setTimeout(() => popup.remove(), 3000);
      }

      // Tangani akhir ronde (waktu habis)
      function handleRoundEnd(success) {
        if (!success) {
          gameState.lives--;
          if (gameState.lives <= 0) {
            gameState.lives = 0;
            handleGameOver();
          } else {
            gameState.timer = ROUND_TIME;
            nextQuestion();
          }
        }
      }

      // Guncang layar
      function shakeScreen() {
        shakeIntensity = 1;
      }

      // Toggle jeda permainan
      function togglePause() {
        gameState.isPaused = !gameState.isPaused;
        updateUI();
      }

      // Toggle layar penuh
      function toggleFullscreen() {
        if (!document.fullscreenElement) {
          document.documentElement.requestFullscreen();
        } else if (document.exitFullscreen) {
          document.exitFullscreen();
        }
      }

      // Tangani game over
      function handleGameOver() {
        gameState.isGameOver = true;
        gameState.isPaused = true;
        updateHighScores();
        renderGameOverScreen();
      }

      // Render layar Game Over overlay
      function renderGameOverScreen() {
        ctx.save();
        ctx.fillStyle = "rgba(0,0,0,0.7)";
        ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);

        ctx.fillStyle = "#d73a49";
        ctx.font = 'bold 48px "Segoe UI", sans-serif';
        ctx.textAlign = "center";
        ctx.fillText("Permainan Berakhir", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 - 60);
        ctx.fillStyle = "#ffffff";
        ctx.font = '24px "Segoe UI", sans-serif';
        ctx.fillText(`Skor Anda: ${gameState.score}`, CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);
        ctx.fillText(`Level Tercapai: ${gameState.level}`, CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 + 40);
        ctx.font = '18px "Segoe UI", sans-serif';
        ctx.fillText("Tekan Mulai Ulang untuk bermain kembali", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 + 80);
        ctx.restore();
      }

      // Perbarui skor tertinggi ke localStorage & batas top 5
      function updateHighScores() {
        const now = new Date();
        const dateStr = now.toISOString().slice(0, 10);
        const newEntry = {
          name: prompt("Permainan berakhir! Masukkan nama untuk papan skor:", "Pemain") || "Pemain",
          score: gameState.score,
          level: gameState.level,
          date: dateStr,
          achievements: achievements.filter((a) => a.unlocked).map((a) => a.id)
        };
        highScores.push(newEntry);
        highScores.sort((a, b) => b.score - a.score);
        highScores = highScores.slice(0, 5);
        localStorage.setItem(HIGH_SCORES_KEY, JSON.stringify(highScores));
        loadHighScoresUI();
      }

      // Muat UI papan skor di sidebar (tambahan di bawahnya)
      function loadHighScoresUI() {
        let hsSection = document.getElementById("highscores-section");
        if (!hsSection) {
          hsSection = document.createElement("section");
          hsSection.id = "highscores-section";
          hsSection.innerHTML = "<h3>Papan Skor</h3><ol id='highscores-list'></ol>";
          sidebar.appendChild(hsSection);
        }
        const hsList = hsSection.querySelector("#highscores-list");
        hsList.innerHTML = "";
        if (highScores.length === 0) {
          hsList.innerHTML = "<li>Belum ada papan skor</li>";
        } else {
          for (const entry of highScores) {
            const li = document.createElement("li");
            li.textContent = `${entry.name} — Skor: ${entry.score}, Level: ${entry.level} (${entry.date})`;
            hsList.appendChild(li);
          }
        }
      }

      // Toggle sidebar di layar kecil
      function toggleSidebar() {
        if (sidebar.classList.contains("collapsed") ||
            window.innerWidth <= 768 && !sidebar.classList.contains("visible")) {
          sidebar.classList.add("visible");
          sidebar.classList.remove("collapsed");
          toggleSidebarBtn.setAttribute("aria-pressed", "true");
        } else {
          sidebar.classList.remove("visible");
          sidebar.classList.add("collapsed");
          toggleSidebarBtn.setAttribute("aria-pressed", "false");
        }
      }

      // Tombol tutup sidebar
      sidebarCloseBtn.addEventListener('click', () => {
        sidebar.classList.remove("visible");
        sidebar.classList.add("collapsed");
        toggleSidebarBtn.setAttribute("aria-pressed", "false");
      });

      // Tombol menu sidebar
      toggleSidebarBtn.addEventListener("click", toggleSidebar);

      // Tombol jeda
      btnPause.addEventListener("click", () => {
        togglePause();
      });
      // Tombol layar penuh
      btnFullscreen.addEventListener("click", () => {
        toggleFullscreen();
      });
      // Tombol mulai ulang
      btnReset.addEventListener("click", () => {
        if (confirm("Yakin ingin memulai ulang permainan?")) {
          initGame();
        }
      });

      // Power-up petunjuk dan waktu beku (untuk demo)
      function useHintPowerUp() {
        if (!gameState.powerUps.hintUsed) {
          gameState.powerUps.hintUsed = true;
          gameState.powerUps.hintStartTime = performance.now();
          gameState.powerUps.hintDuration = 5000; // 5 detik
          sounds.powerup();
          updateUI();
        }
      }
      function useTimeFreezePowerUp() {
        if (!gameState.powerUps.timeFreezeActive) {
          gameState.powerUps.timeFreezeActive = true;
          gameState.powerUps.timeFreezeTimer = 10;
          sounds.powerup();
          updateUI();
        }
      }

      // Shortcut keyboard untuk power-up
      window.addEventListener("keydown", (e) => {
        if (gameState.isPaused || gameState.isGameOver) return;
        if (e.key === "1") {
          useHintPowerUp();
        } else if (e.key === "2") {
          useTimeFreezePowerUp();
        }
      });

      // Setup pemroses input & responsif sidebar
      window.addEventListener("keydown", handleKeyDown);
      window.addEventListener("resize", () => {
        if (window.innerWidth > 768) {
          sidebar.classList.remove("collapsed", "visible");
          toggleSidebarBtn.setAttribute("aria-pressed", "false");
        }
      });

      // Mulai permainan
      initGame();
      loadHighScoresUI();

    })();
  </script>
</body>
</html>

